---
export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0,viewport-fit=cover"
    />
    <link rel="icon" type="image/svg+xml" href="/icon.svg" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" sizes="180x180" />
    <link rel="mask-icon" href="/icon.svg" color="#FFFFFF" />
    <meta name="theme-color" content="#212129" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content="" />
    <title>{title}</title>
    <meta name="description" content="A simple blog" />
    {
      import.meta.env.HEAD_SCRIPTS
        ? (
        <Fragment set:html={import.meta.env.HEAD_SCRIPTS} />
          )
        : null
    }
    <!-- netlify-disable-blocks -->
    {
      import.meta.env.PROD && (
        <>
          <script is:inline src="/registerSW.js" />
          <link rel="manifest" href="/manifest.webmanifest" />
        </>
      )
    }
    <!-- netlify-disable-end -->
  </head>
  <body class="bg-base fg-base">
    <slot />
  </body>
</html>

<style is:global>
  :root {
    --c-scroll: #d9d9d9;
    --c-scroll-hover: #bbbbbb;
    --c-shadow: #00000008;
  }
  html.dark {
    --c-scroll: #333333;
    --c-scroll-hover: #555555;
    --c-shadow: #ffffff08;
  }

  ::-webkit-scrollbar {
    width: 4px;
    height: 4px;
  }
  ::-webkit-scrollbar-thumb {
    background-color: var(--c-scroll);
  }
  ::-webkit-scrollbar-thumb:hover {
    background-color: var(--c-scroll-hover);
  }

  ::selection {
    background: rgba(0, 0, 0, 0.12);
  }
  .dark ::selection {
    background: rgba(255, 255, 255, 0.12);
  }
</style>

<script>
(function() {
  const prefersDark
    = window.matchMedia
    && window.matchMedia('(prefers-color-scheme: dark)').matches
  const setting = localStorage.getItem('theme') || 'auto'
  if (setting === 'dark' || (prefersDark && setting !== 'light'))
    document.documentElement.classList.toggle('dark', true)
})()
</script>
